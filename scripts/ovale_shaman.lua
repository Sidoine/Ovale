local OVALE, Ovale = ...
local OvaleScripts = Ovale.OvaleScripts

-- THE REST OF THIS FILE IS AUTOMATICALLY GENERATED.
-- ANY CHANGES MADE BELOW THIS POINT WILL BE LOST.

do
	local name = "simulationcraft_shaman_elemental_t19p"
	local desc = "[7.0] SimulationCraft: Shaman_Elemental_T19P"
	local code = [[
# Based on SimulationCraft profile "Shaman_Elemental_T19P".
#	class=shaman
#	spec=elemental
#	talents=3112212

Include(ovale_common)
Include(ovale_trinkets_mop)
Include(ovale_trinkets_wod)
Include(ovale_shaman_spells)

AddCheckBox(opt_bloodlust SpellName(bloodlust) specialization=elemental)

AddFunction ElementalBloodlust
{
	if CheckBoxOn(opt_bloodlust) and DebuffExpires(burst_haste_debuff any=1)
	{
		Spell(bloodlust)
		Spell(heroism)
	}
}

### actions.default

AddFunction ElementalDefaultMainActions
{
	#storm_elemental
	Spell(storm_elemental)
	#run_action_list,name=aoe,if=active_enemies>2&(spell_targets.chain_lightning>2|spell_targets.lava_beam>2)
	if Enemies() > 2 and { Enemies() > 2 or Enemies() > 2 } ElementalAoeMainActions()

	unless Enemies() > 2 and { Enemies() > 2 or Enemies() > 2 } and ElementalAoeMainPostConditions()
	{
		#run_action_list,name=single
		ElementalSingleMainActions()
	}
}

AddFunction ElementalDefaultMainPostConditions
{
	Enemies() > 2 and { Enemies() > 2 or Enemies() > 2 } and ElementalAoeMainPostConditions() or ElementalSingleMainPostConditions()
}

AddFunction ElementalDefaultShortCdActions
{
	unless Spell(storm_elemental)
	{
		#elemental_mastery
		Spell(elemental_mastery)
		#run_action_list,name=aoe,if=active_enemies>2&(spell_targets.chain_lightning>2|spell_targets.lava_beam>2)
		if Enemies() > 2 and { Enemies() > 2 or Enemies() > 2 } ElementalAoeShortCdActions()

		unless Enemies() > 2 and { Enemies() > 2 or Enemies() > 2 } and ElementalAoeShortCdPostConditions()
		{
			#run_action_list,name=single
			ElementalSingleShortCdActions()
		}
	}
}

AddFunction ElementalDefaultShortCdPostConditions
{
	Spell(storm_elemental) or Enemies() > 2 and { Enemies() > 2 or Enemies() > 2 } and ElementalAoeShortCdPostConditions() or ElementalSingleShortCdPostConditions()
}

AddFunction ElementalDefaultCdActions
{
	#bloodlust,if=target.health.pct<25|time>0.500
	if target.HealthPercent() < 25 or TimeInCombat() > 0.5 ElementalBloodlust()
	#potion,name=deadly_grace,if=buff.ascendance.up|target.time_to_die<=30
	#totem_mastery,if=buff.resonance_totem.remains<2
	if BuffRemaining(resonance_totem_buff) < 2 Spell(totem_mastery)
	#fire_elemental
	Spell(fire_elemental)

	unless Spell(storm_elemental)
	{
		#blood_fury,if=!talent.ascendance.enabled|buff.ascendance.up|cooldown.ascendance.remains>50
		if not Talent(ascendance_talent) or BuffPresent(ascendance_caster_buff) or SpellCooldown(ascendance_caster) > 50 Spell(blood_fury_apsp)
		#berserking,if=!talent.ascendance.enabled|buff.ascendance.up
		if not Talent(ascendance_talent) or BuffPresent(ascendance_caster_buff) Spell(berserking)
		#run_action_list,name=aoe,if=active_enemies>2&(spell_targets.chain_lightning>2|spell_targets.lava_beam>2)
		if Enemies() > 2 and { Enemies() > 2 or Enemies() > 2 } ElementalAoeCdActions()

		unless Enemies() > 2 and { Enemies() > 2 or Enemies() > 2 } and ElementalAoeCdPostConditions()
		{
			#run_action_list,name=single
			ElementalSingleCdActions()
		}
	}
}

AddFunction ElementalDefaultCdPostConditions
{
	Spell(storm_elemental) or Enemies() > 2 and { Enemies() > 2 or Enemies() > 2 } and ElementalAoeCdPostConditions() or ElementalSingleCdPostConditions()
}

### actions.aoe

AddFunction ElementalAoeMainActions
{
	#flame_shock,if=spell_targets.chain_lightning=3&maelstrom>=20,target_if=refreshable
	if Enemies() == 3 and Maelstrom() >= 20 and target.Refreshable(flame_shock_debuff) Spell(flame_shock)
	#earthquake_totem
	Spell(earthquake_totem)
	#lava_burst,if=buff.lava_surge.up&spell_targets.chain_lightning=3
	if BuffPresent(lava_surge_buff) and Enemies() == 3 Spell(lava_burst)
	#lava_beam
	Spell(lava_beam)
	#chain_lightning,target_if=!debuff.lightning_rod.up
	if not target.DebuffPresent(lightning_rod_debuff) Spell(chain_lightning)
	#chain_lightning
	Spell(chain_lightning)
	#lava_burst,moving=1
	if Speed() > 0 Spell(lava_burst)
	#flame_shock,moving=1,target_if=refreshable
	if Speed() > 0 and target.Refreshable(flame_shock_debuff) Spell(flame_shock)
}

AddFunction ElementalAoeMainPostConditions
{
}

AddFunction ElementalAoeShortCdActions
{
	#stormkeeper
	Spell(stormkeeper)
	#liquid_magma_totem
	Spell(liquid_magma_totem)
}

AddFunction ElementalAoeShortCdPostConditions
{
	Enemies() == 3 and Maelstrom() >= 20 and target.Refreshable(flame_shock_debuff) and Spell(flame_shock) or Spell(earthquake_totem) or BuffPresent(lava_surge_buff) and Enemies() == 3 and Spell(lava_burst) or Spell(lava_beam) or not target.DebuffPresent(lightning_rod_debuff) and Spell(chain_lightning) or Spell(chain_lightning) or Speed() > 0 and Spell(lava_burst) or Speed() > 0 and target.Refreshable(flame_shock_debuff) and Spell(flame_shock)
}

AddFunction ElementalAoeCdActions
{
	unless Spell(stormkeeper)
	{
		#ascendance
		if BuffExpires(ascendance_caster_buff) Spell(ascendance_caster)
	}
}

AddFunction ElementalAoeCdPostConditions
{
	Spell(stormkeeper) or Spell(liquid_magma_totem) or Enemies() == 3 and Maelstrom() >= 20 and target.Refreshable(flame_shock_debuff) and Spell(flame_shock) or Spell(earthquake_totem) or BuffPresent(lava_surge_buff) and Enemies() == 3 and Spell(lava_burst) or Spell(lava_beam) or not target.DebuffPresent(lightning_rod_debuff) and Spell(chain_lightning) or Spell(chain_lightning) or Speed() > 0 and Spell(lava_burst) or Speed() > 0 and target.Refreshable(flame_shock_debuff) and Spell(flame_shock)
}

### actions.precombat

AddFunction ElementalPrecombatMainActions
{
	#flask,type=whispered_pact
	#food,name=fishbrul_special
	#augmentation,type=defiled
	Spell(augmentation)
}

AddFunction ElementalPrecombatMainPostConditions
{
}

AddFunction ElementalPrecombatShortCdActions
{
	unless Spell(augmentation)
	{
		#snapshot_stats
		#potion,name=deadly_grace
		#stormkeeper
		Spell(stormkeeper)
	}
}

AddFunction ElementalPrecombatShortCdPostConditions
{
	Spell(augmentation)
}

AddFunction ElementalPrecombatCdActions
{
	unless Spell(augmentation) or Spell(stormkeeper)
	{
		#totem_mastery
		Spell(totem_mastery)
	}
}

AddFunction ElementalPrecombatCdPostConditions
{
	Spell(augmentation) or Spell(stormkeeper)
}

### actions.single

AddFunction ElementalSingleMainActions
{
	#flame_shock,if=!ticking
	if not target.DebuffPresent(flame_shock_debuff) Spell(flame_shock)
	#flame_shock,if=maelstrom>=20&remains<=buff.ascendance.duration&cooldown.ascendance.remains+buff.ascendance.duration<=duration
	if Maelstrom() >= 20 and target.DebuffRemaining(flame_shock_debuff) <= BaseDuration(ascendance_caster_buff) and SpellCooldown(ascendance_caster) + BaseDuration(ascendance_caster_buff) <= BaseDuration(flame_shock_debuff) Spell(flame_shock)
	#earth_shock,if=maelstrom>=92
	if Maelstrom() >= 92 Spell(earth_shock)
	#icefury,if=raid_event.movement.in<5
	if 600 < 5 Spell(icefury)
	#lava_burst,if=dot.flame_shock.remains>cast_time&(cooldown_react|buff.ascendance.up)
	if target.DebuffRemaining(flame_shock_debuff) > CastTime(lava_burst) and { not SpellCooldown(lava_burst) > 0 or BuffPresent(ascendance_caster_buff) } Spell(lava_burst)
	#elemental_blast
	Spell(elemental_blast)
	#earthquake_totem,if=buff.echoes_of_the_great_sundering.up
	if BuffPresent(echoes_of_the_great_sundering_buff) Spell(earthquake_totem)
	#flame_shock,if=maelstrom>=20&buff.elemental_focus.up,target_if=refreshable
	if Maelstrom() >= 20 and BuffPresent(elemental_focus_buff) and target.Refreshable(flame_shock_debuff) Spell(flame_shock)
	#frost_shock,if=talent.icefury.enabled&buff.icefury.up&((maelstrom>=20&raid_event.movement.in>buff.icefury.remains)|buff.icefury.remains<(1.5*spell_haste*buff.icefury.stack))
	if Talent(icefury_talent) and BuffPresent(icefury_buff) and { Maelstrom() >= 20 and 600 > BuffRemaining(icefury_buff) or BuffRemaining(icefury_buff) < 1.5 * { 100 / { 100 + SpellHaste() } } * BuffStacks(icefury_buff) } Spell(frost_shock)
	#frost_shock,moving=1,if=buff.icefury.up
	if Speed() > 0 and BuffPresent(icefury_buff) Spell(frost_shock)
	#earth_shock,if=maelstrom>=86
	if Maelstrom() >= 86 Spell(earth_shock)
	#icefury,if=maelstrom<=70&raid_event.movement.in>30&((talent.ascendance.enabled&cooldown.ascendance.remains>buff.icefury.duration)|!talent.ascendance.enabled)
	if Maelstrom() <= 70 and 600 > 30 and { Talent(ascendance_talent) and SpellCooldown(ascendance_caster) > BaseDuration(icefury_buff) or not Talent(ascendance_talent) } Spell(icefury)
	#lava_beam,if=active_enemies>1&spell_targets.lava_beam>1
	if Enemies() > 1 and Enemies() > 1 Spell(lava_beam)
	#lightning_bolt,if=buff.power_of_the_maelstrom.up,target_if=!debuff.lightning_rod.up
	if BuffPresent(power_of_the_maelstrom_buff) and not target.DebuffPresent(lightning_rod_debuff) Spell(lightning_bolt)
	#lightning_bolt,if=buff.power_of_the_maelstrom.up
	if BuffPresent(power_of_the_maelstrom_buff) Spell(lightning_bolt)
	#chain_lightning,if=active_enemies>1&spell_targets.chain_lightning>1,target_if=!debuff.lightning_rod.up
	if Enemies() > 1 and Enemies() > 1 and not target.DebuffPresent(lightning_rod_debuff) Spell(chain_lightning)
	#chain_lightning,if=active_enemies>1&spell_targets.chain_lightning>1
	if Enemies() > 1 and Enemies() > 1 Spell(chain_lightning)
	#lightning_bolt,target_if=!debuff.lightning_rod.up
	if not target.DebuffPresent(lightning_rod_debuff) Spell(lightning_bolt)
	#lightning_bolt
	Spell(lightning_bolt)
	#flame_shock,moving=1,target_if=refreshable
	if Speed() > 0 and target.Refreshable(flame_shock_debuff) Spell(flame_shock)
	#earth_shock,moving=1
	if Speed() > 0 Spell(earth_shock)
}

AddFunction ElementalSingleMainPostConditions
{
}

AddFunction ElementalSingleShortCdActions
{
	unless not target.DebuffPresent(flame_shock_debuff) and Spell(flame_shock) or Maelstrom() >= 20 and target.DebuffRemaining(flame_shock_debuff) <= BaseDuration(ascendance_caster_buff) and SpellCooldown(ascendance_caster) + BaseDuration(ascendance_caster_buff) <= BaseDuration(flame_shock_debuff) and Spell(flame_shock) or Maelstrom() >= 92 and Spell(earth_shock) or 600 < 5 and Spell(icefury) or target.DebuffRemaining(flame_shock_debuff) > CastTime(lava_burst) and { not SpellCooldown(lava_burst) > 0 or BuffPresent(ascendance_caster_buff) } and Spell(lava_burst) or Spell(elemental_blast) or BuffPresent(echoes_of_the_great_sundering_buff) and Spell(earthquake_totem) or Maelstrom() >= 20 and BuffPresent(elemental_focus_buff) and target.Refreshable(flame_shock_debuff) and Spell(flame_shock) or Talent(icefury_talent) and BuffPresent(icefury_buff) and { Maelstrom() >= 20 and 600 > BuffRemaining(icefury_buff) or BuffRemaining(icefury_buff) < 1.5 * { 100 / { 100 + SpellHaste() } } * BuffStacks(icefury_buff) } and Spell(frost_shock) or Speed() > 0 and BuffPresent(icefury_buff) and Spell(frost_shock) or Maelstrom() >= 86 and Spell(earth_shock) or Maelstrom() <= 70 and 600 > 30 and { Talent(ascendance_talent) and SpellCooldown(ascendance_caster) > BaseDuration(icefury_buff) or not Talent(ascendance_talent) } and Spell(icefury)
	{
		#liquid_magma_totem,if=raid_event.adds.count<3|raid_event.adds.in>50
		if 0 < 3 or 600 > 50 Spell(liquid_magma_totem)
		#stormkeeper,if=(talent.ascendance.enabled&cooldown.ascendance.remains>10)|!talent.ascendance.enabled
		if Talent(ascendance_talent) and SpellCooldown(ascendance_caster) > 10 or not Talent(ascendance_talent) Spell(stormkeeper)
	}
}

AddFunction ElementalSingleShortCdPostConditions
{
	not target.DebuffPresent(flame_shock_debuff) and Spell(flame_shock) or Maelstrom() >= 20 and target.DebuffRemaining(flame_shock_debuff) <= BaseDuration(ascendance_caster_buff) and SpellCooldown(ascendance_caster) + BaseDuration(ascendance_caster_buff) <= BaseDuration(flame_shock_debuff) and Spell(flame_shock) or Maelstrom() >= 92 and Spell(earth_shock) or 600 < 5 and Spell(icefury) or target.DebuffRemaining(flame_shock_debuff) > CastTime(lava_burst) and { not SpellCooldown(lava_burst) > 0 or BuffPresent(ascendance_caster_buff) } and Spell(lava_burst) or Spell(elemental_blast) or BuffPresent(echoes_of_the_great_sundering_buff) and Spell(earthquake_totem) or Maelstrom() >= 20 and BuffPresent(elemental_focus_buff) and target.Refreshable(flame_shock_debuff) and Spell(flame_shock) or Talent(icefury_talent) and BuffPresent(icefury_buff) and { Maelstrom() >= 20 and 600 > BuffRemaining(icefury_buff) or BuffRemaining(icefury_buff) < 1.5 * { 100 / { 100 + SpellHaste() } } * BuffStacks(icefury_buff) } and Spell(frost_shock) or Speed() > 0 and BuffPresent(icefury_buff) and Spell(frost_shock) or Maelstrom() >= 86 and Spell(earth_shock) or Maelstrom() <= 70 and 600 > 30 and { Talent(ascendance_talent) and SpellCooldown(ascendance_caster) > BaseDuration(icefury_buff) or not Talent(ascendance_talent) } and Spell(icefury) or Enemies() > 1 and Enemies() > 1 and Spell(lava_beam) or BuffPresent(power_of_the_maelstrom_buff) and not target.DebuffPresent(lightning_rod_debuff) and Spell(lightning_bolt) or BuffPresent(power_of_the_maelstrom_buff) and Spell(lightning_bolt) or Enemies() > 1 and Enemies() > 1 and not target.DebuffPresent(lightning_rod_debuff) and Spell(chain_lightning) or Enemies() > 1 and Enemies() > 1 and Spell(chain_lightning) or not target.DebuffPresent(lightning_rod_debuff) and Spell(lightning_bolt) or Spell(lightning_bolt) or Speed() > 0 and target.Refreshable(flame_shock_debuff) and Spell(flame_shock) or Speed() > 0 and Spell(earth_shock)
}

AddFunction ElementalSingleCdActions
{
	#ascendance,if=dot.flame_shock.remains>buff.ascendance.duration&(time>=60|buff.bloodlust.up)&cooldown.lava_burst.remains>0&!buff.stormkeeper.up
	if target.DebuffRemaining(flame_shock_debuff) > BaseDuration(ascendance_caster_buff) and { TimeInCombat() >= 60 or BuffPresent(burst_haste_buff any=1) } and SpellCooldown(lava_burst) > 0 and not BuffPresent(stormkeeper_buff) and BuffExpires(ascendance_caster_buff) Spell(ascendance_caster)

	unless not target.DebuffPresent(flame_shock_debuff) and Spell(flame_shock) or Maelstrom() >= 20 and target.DebuffRemaining(flame_shock_debuff) <= BaseDuration(ascendance_caster_buff) and SpellCooldown(ascendance_caster) + BaseDuration(ascendance_caster_buff) <= BaseDuration(flame_shock_debuff) and Spell(flame_shock) or Maelstrom() >= 92 and Spell(earth_shock) or 600 < 5 and Spell(icefury) or target.DebuffRemaining(flame_shock_debuff) > CastTime(lava_burst) and { not SpellCooldown(lava_burst) > 0 or BuffPresent(ascendance_caster_buff) } and Spell(lava_burst) or Spell(elemental_blast) or BuffPresent(echoes_of_the_great_sundering_buff) and Spell(earthquake_totem) or Maelstrom() >= 20 and BuffPresent(elemental_focus_buff) and target.Refreshable(flame_shock_debuff) and Spell(flame_shock) or Talent(icefury_talent) and BuffPresent(icefury_buff) and { Maelstrom() >= 20 and 600 > BuffRemaining(icefury_buff) or BuffRemaining(icefury_buff) < 1.5 * { 100 / { 100 + SpellHaste() } } * BuffStacks(icefury_buff) } and Spell(frost_shock) or Speed() > 0 and BuffPresent(icefury_buff) and Spell(frost_shock) or Maelstrom() >= 86 and Spell(earth_shock) or Maelstrom() <= 70 and 600 > 30 and { Talent(ascendance_talent) and SpellCooldown(ascendance_caster) > BaseDuration(icefury_buff) or not Talent(ascendance_talent) } and Spell(icefury) or { 0 < 3 or 600 > 50 } and Spell(liquid_magma_totem) or { Talent(ascendance_talent) and SpellCooldown(ascendance_caster) > 10 or not Talent(ascendance_talent) } and Spell(stormkeeper)
	{
		#totem_mastery,if=buff.resonance_totem.remains<10|(buff.resonance_totem.remains<(buff.ascendance.duration+cooldown.ascendance.remains)&cooldown.ascendance.remains<15)
		if BuffRemaining(resonance_totem_buff) < 10 or BuffRemaining(resonance_totem_buff) < BaseDuration(ascendance_caster_buff) + SpellCooldown(ascendance_caster) and SpellCooldown(ascendance_caster) < 15 Spell(totem_mastery)
	}
}

AddFunction ElementalSingleCdPostConditions
{
	not target.DebuffPresent(flame_shock_debuff) and Spell(flame_shock) or Maelstrom() >= 20 and target.DebuffRemaining(flame_shock_debuff) <= BaseDuration(ascendance_caster_buff) and SpellCooldown(ascendance_caster) + BaseDuration(ascendance_caster_buff) <= BaseDuration(flame_shock_debuff) and Spell(flame_shock) or Maelstrom() >= 92 and Spell(earth_shock) or 600 < 5 and Spell(icefury) or target.DebuffRemaining(flame_shock_debuff) > CastTime(lava_burst) and { not SpellCooldown(lava_burst) > 0 or BuffPresent(ascendance_caster_buff) } and Spell(lava_burst) or Spell(elemental_blast) or BuffPresent(echoes_of_the_great_sundering_buff) and Spell(earthquake_totem) or Maelstrom() >= 20 and BuffPresent(elemental_focus_buff) and target.Refreshable(flame_shock_debuff) and Spell(flame_shock) or Talent(icefury_talent) and BuffPresent(icefury_buff) and { Maelstrom() >= 20 and 600 > BuffRemaining(icefury_buff) or BuffRemaining(icefury_buff) < 1.5 * { 100 / { 100 + SpellHaste() } } * BuffStacks(icefury_buff) } and Spell(frost_shock) or Speed() > 0 and BuffPresent(icefury_buff) and Spell(frost_shock) or Maelstrom() >= 86 and Spell(earth_shock) or Maelstrom() <= 70 and 600 > 30 and { Talent(ascendance_talent) and SpellCooldown(ascendance_caster) > BaseDuration(icefury_buff) or not Talent(ascendance_talent) } and Spell(icefury) or { 0 < 3 or 600 > 50 } and Spell(liquid_magma_totem) or { Talent(ascendance_talent) and SpellCooldown(ascendance_caster) > 10 or not Talent(ascendance_talent) } and Spell(stormkeeper) or Enemies() > 1 and Enemies() > 1 and Spell(lava_beam) or BuffPresent(power_of_the_maelstrom_buff) and not target.DebuffPresent(lightning_rod_debuff) and Spell(lightning_bolt) or BuffPresent(power_of_the_maelstrom_buff) and Spell(lightning_bolt) or Enemies() > 1 and Enemies() > 1 and not target.DebuffPresent(lightning_rod_debuff) and Spell(chain_lightning) or Enemies() > 1 and Enemies() > 1 and Spell(chain_lightning) or not target.DebuffPresent(lightning_rod_debuff) and Spell(lightning_bolt) or Spell(lightning_bolt) or Speed() > 0 and target.Refreshable(flame_shock_debuff) and Spell(flame_shock) or Speed() > 0 and Spell(earth_shock)
}

### Elemental icons.

AddCheckBox(opt_shaman_elemental_aoe L(AOE) default specialization=elemental)

AddIcon checkbox=!opt_shaman_elemental_aoe enemies=1 help=shortcd specialization=elemental
{
	if not InCombat() ElementalPrecombatShortCdActions()
	unless not InCombat() and ElementalPrecombatShortCdPostConditions()
	{
		ElementalDefaultShortCdActions()
	}
}

AddIcon checkbox=opt_shaman_elemental_aoe help=shortcd specialization=elemental
{
	if not InCombat() ElementalPrecombatShortCdActions()
	unless not InCombat() and ElementalPrecombatShortCdPostConditions()
	{
		ElementalDefaultShortCdActions()
	}
}

AddIcon enemies=1 help=main specialization=elemental
{
	if not InCombat() ElementalPrecombatMainActions()
	unless not InCombat() and ElementalPrecombatMainPostConditions()
	{
		ElementalDefaultMainActions()
	}
}

AddIcon checkbox=opt_shaman_elemental_aoe help=aoe specialization=elemental
{
	if not InCombat() ElementalPrecombatMainActions()
	unless not InCombat() and ElementalPrecombatMainPostConditions()
	{
		ElementalDefaultMainActions()
	}
}

AddIcon checkbox=!opt_shaman_elemental_aoe enemies=1 help=cd specialization=elemental
{
	if not InCombat() ElementalPrecombatCdActions()
	unless not InCombat() and ElementalPrecombatCdPostConditions()
	{
		ElementalDefaultCdActions()
	}
}

AddIcon checkbox=opt_shaman_elemental_aoe help=cd specialization=elemental
{
	if not InCombat() ElementalPrecombatCdActions()
	unless not InCombat() and ElementalPrecombatCdPostConditions()
	{
		ElementalDefaultCdActions()
	}
}

### Required symbols
# ascendance_caster
# ascendance_caster_buff
# ascendance_talent
# augmentation
# berserking
# blood_fury_apsp
# bloodlust
# chain_lightning
# earth_shock
# earthquake_totem
# echoes_of_the_great_sundering_buff
# elemental_blast
# elemental_focus_buff
# elemental_mastery
# fire_elemental
# flame_shock
# flame_shock_debuff
# frost_shock
# heroism
# icefury
# icefury_buff
# icefury_talent
# lava_beam
# lava_burst
# lava_surge_buff
# lightning_bolt
# lightning_rod_debuff
# liquid_magma_totem
# power_of_the_maelstrom_buff
# resonance_totem_buff
# storm_elemental
# stormkeeper
# stormkeeper_buff
# totem_mastery
]]
	OvaleScripts:RegisterScript("SHAMAN", "elemental", name, desc, code, "script")
end

do
	local name = "simulationcraft_shaman_enhancement_t19p"
	local desc = "[7.0] SimulationCraft: Shaman_Enhancement_T19P"
	local code = [[
# Based on SimulationCraft profile "Shaman_Enhancement_T19P".
#	class=shaman
#	spec=enhancement
#	talents=3003112

Include(ovale_common)
Include(ovale_trinkets_mop)
Include(ovale_trinkets_wod)
Include(ovale_shaman_spells)

AddCheckBox(opt_interrupt L(interrupt) default specialization=enhancement)
AddCheckBox(opt_melee_range L(not_in_melee_range) specialization=enhancement)
AddCheckBox(opt_bloodlust SpellName(bloodlust) specialization=enhancement)

AddFunction EnhancementUseItemActions
{
	Item(Trinket0Slot usable=1)
	Item(Trinket1Slot usable=1)
}

AddFunction EnhancementBloodlust
{
	if CheckBoxOn(opt_bloodlust) and DebuffExpires(burst_haste_debuff any=1)
	{
		Spell(bloodlust)
		Spell(heroism)
	}
}

AddFunction EnhancementGetInMeleeRange
{
	if CheckBoxOn(opt_melee_range) and not target.InRange(stormstrike) Texture(misc_arrowlup help=L(not_in_melee_range))
}

AddFunction EnhancementInterruptActions
{
	if CheckBoxOn(opt_interrupt) and not target.IsFriend() and target.IsInterruptible()
	{
		Spell(wind_shear)
		if not target.Classification(worldboss)
		{
			Spell(arcane_torrent_mana)
			if target.InRange(quaking_palm) Spell(quaking_palm)
			Spell(war_stomp)
		}
	}
}

### actions.default

AddFunction EnhancementDefaultMainActions
{
	#boulderfist,if=buff.boulderfist.remains<gcd|charges_fractional>1.75
	if BuffRemaining(boulderfist_buff) < GCD() or Charges(boulderfist count=0) > 1.75 Spell(boulderfist)
	#frostbrand,if=talent.hailstorm.enabled&buff.frostbrand.remains<gcd
	if Talent(hailstorm_talent) and BuffRemaining(frostbrand_buff) < GCD() Spell(frostbrand)
	#flametongue,if=buff.flametongue.remains<gcd
	if BuffRemaining(flametongue_buff) < GCD() Spell(flametongue)
	#fury_of_air,if=!ticking
	if not target.DebuffPresent(fury_of_air_debuff) Spell(fury_of_air)
	#doom_winds
	Spell(doom_winds)
	#crash_lightning,if=active_enemies>=3
	if Enemies() >= 3 Spell(crash_lightning)
	#windstrike
	Spell(windstrike)
	#stormstrike
	Spell(stormstrike)
	#frostbrand,if=talent.hailstorm.enabled&buff.frostbrand.remains<4.8
	if Talent(hailstorm_talent) and BuffRemaining(frostbrand_buff) < 4.8 Spell(frostbrand)
	#flametongue,if=buff.flametongue.remains<4.8
	if BuffRemaining(flametongue_buff) < 4.8 Spell(flametongue)
	#lightning_bolt,if=talent.overcharge.enabled&maelstrom>=60
	if Talent(overcharge_talent) and Maelstrom() >= 60 Spell(lightning_bolt)
	#lava_lash,if=buff.hot_hand.react
	if BuffPresent(hot_hand_buff) Spell(lava_lash)
	#earthen_spike
	Spell(earthen_spike)
	#crash_lightning,if=active_enemies>1|talent.crashing_storm.enabled|(pet.feral_spirit.remains>5|pet.frost_wolf.remains>5|pet.fiery_wolf.remains>5|pet.lightning_wolf.remains>5)
	if Enemies() > 1 or Talent(crashing_storm_talent) or PetPresent() > 5 or PetPresent() > 5 or PetPresent() > 5 or PetPresent() > 5 Spell(crash_lightning)
	#lava_lash,if=maelstrom>=90
	if Maelstrom() >= 90 Spell(lava_lash)
	#rockbiter
	Spell(rockbiter)
	#flametongue
	Spell(flametongue)
	#boulderfist
	Spell(boulderfist)
}

AddFunction EnhancementDefaultMainPostConditions
{
}

AddFunction EnhancementDefaultShortCdActions
{
	#auto_attack
	EnhancementGetInMeleeRange()

	unless { BuffRemaining(boulderfist_buff) < GCD() or Charges(boulderfist count=0) > 1.75 } and Spell(boulderfist) or Talent(hailstorm_talent) and BuffRemaining(frostbrand_buff) < GCD() and Spell(frostbrand) or BuffRemaining(flametongue_buff) < GCD() and Spell(flametongue)
	{
		#windsong
		Spell(windsong)

		unless not target.DebuffPresent(fury_of_air_debuff) and Spell(fury_of_air) or Spell(doom_winds) or Enemies() >= 3 and Spell(crash_lightning) or Spell(windstrike) or Spell(stormstrike) or Talent(hailstorm_talent) and BuffRemaining(frostbrand_buff) < 4.8 and Spell(frostbrand) or BuffRemaining(flametongue_buff) < 4.8 and Spell(flametongue) or Talent(overcharge_talent) and Maelstrom() >= 60 and Spell(lightning_bolt) or BuffPresent(hot_hand_buff) and Spell(lava_lash) or Spell(earthen_spike) or { Enemies() > 1 or Talent(crashing_storm_talent) or PetPresent() > 5 or PetPresent() > 5 or PetPresent() > 5 or PetPresent() > 5 } and Spell(crash_lightning)
		{
			#sundering
			Spell(sundering)
		}
	}
}

AddFunction EnhancementDefaultShortCdPostConditions
{
	{ BuffRemaining(boulderfist_buff) < GCD() or Charges(boulderfist count=0) > 1.75 } and Spell(boulderfist) or Talent(hailstorm_talent) and BuffRemaining(frostbrand_buff) < GCD() and Spell(frostbrand) or BuffRemaining(flametongue_buff) < GCD() and Spell(flametongue) or not target.DebuffPresent(fury_of_air_debuff) and Spell(fury_of_air) or Spell(doom_winds) or Enemies() >= 3 and Spell(crash_lightning) or Spell(windstrike) or Spell(stormstrike) or Talent(hailstorm_talent) and BuffRemaining(frostbrand_buff) < 4.8 and Spell(frostbrand) or BuffRemaining(flametongue_buff) < 4.8 and Spell(flametongue) or Talent(overcharge_talent) and Maelstrom() >= 60 and Spell(lightning_bolt) or BuffPresent(hot_hand_buff) and Spell(lava_lash) or Spell(earthen_spike) or { Enemies() > 1 or Talent(crashing_storm_talent) or PetPresent() > 5 or PetPresent() > 5 or PetPresent() > 5 or PetPresent() > 5 } and Spell(crash_lightning) or Maelstrom() >= 90 and Spell(lava_lash) or Spell(rockbiter) or Spell(flametongue) or Spell(boulderfist)
}

AddFunction EnhancementDefaultCdActions
{
	#wind_shear
	EnhancementInterruptActions()
	#bloodlust,if=target.health.pct<25|time>0.500
	if target.HealthPercent() < 25 or TimeInCombat() > 0.5 EnhancementBloodlust()
	#feral_spirit
	Spell(feral_spirit)
	#use_item,slot=trinket2
	EnhancementUseItemActions()
	#potion,name=deadly_grace,if=pet.feral_spirit.remains>10|pet.frost_wolf.remains>5|pet.fiery_wolf.remains>5|pet.lightning_wolf.remains>5|target.time_to_die<=30
	#berserking,if=buff.ascendance.up|!talent.ascendance.enabled|level<100
	if BuffPresent(ascendance_melee_buff) or not Talent(ascendance_talent) or Level() < 100 Spell(berserking)
	#blood_fury
	Spell(blood_fury_apsp)

	unless { BuffRemaining(boulderfist_buff) < GCD() or Charges(boulderfist count=0) > 1.75 } and Spell(boulderfist) or Talent(hailstorm_talent) and BuffRemaining(frostbrand_buff) < GCD() and Spell(frostbrand) or BuffRemaining(flametongue_buff) < GCD() and Spell(flametongue) or Spell(windsong)
	{
		#ascendance
		if BuffExpires(ascendance_melee_buff) Spell(ascendance_melee)
	}
}

AddFunction EnhancementDefaultCdPostConditions
{
	{ BuffRemaining(boulderfist_buff) < GCD() or Charges(boulderfist count=0) > 1.75 } and Spell(boulderfist) or Talent(hailstorm_talent) and BuffRemaining(frostbrand_buff) < GCD() and Spell(frostbrand) or BuffRemaining(flametongue_buff) < GCD() and Spell(flametongue) or Spell(windsong) or not target.DebuffPresent(fury_of_air_debuff) and Spell(fury_of_air) or Spell(doom_winds) or Enemies() >= 3 and Spell(crash_lightning) or Spell(windstrike) or Spell(stormstrike) or Talent(hailstorm_talent) and BuffRemaining(frostbrand_buff) < 4.8 and Spell(frostbrand) or BuffRemaining(flametongue_buff) < 4.8 and Spell(flametongue) or Talent(overcharge_talent) and Maelstrom() >= 60 and Spell(lightning_bolt) or BuffPresent(hot_hand_buff) and Spell(lava_lash) or Spell(earthen_spike) or { Enemies() > 1 or Talent(crashing_storm_talent) or PetPresent() > 5 or PetPresent() > 5 or PetPresent() > 5 or PetPresent() > 5 } and Spell(crash_lightning) or Spell(sundering) or Maelstrom() >= 90 and Spell(lava_lash) or Spell(rockbiter) or Spell(flametongue) or Spell(boulderfist)
}

### actions.precombat

AddFunction EnhancementPrecombatMainActions
{
	#flask,type=seventh_demon
	#augmentation,type=defiled
	Spell(augmentation)
	#food,name=azshari_salad
	#snapshot_stats
	#potion,name=deadly_grace
	#lightning_shield
	Spell(lightning_shield)
}

AddFunction EnhancementPrecombatMainPostConditions
{
}

AddFunction EnhancementPrecombatShortCdActions
{
}

AddFunction EnhancementPrecombatShortCdPostConditions
{
	Spell(augmentation) or Spell(lightning_shield)
}

AddFunction EnhancementPrecombatCdActions
{
}

AddFunction EnhancementPrecombatCdPostConditions
{
	Spell(augmentation) or Spell(lightning_shield)
}

### Enhancement icons.

AddCheckBox(opt_shaman_enhancement_aoe L(AOE) default specialization=enhancement)

AddIcon checkbox=!opt_shaman_enhancement_aoe enemies=1 help=shortcd specialization=enhancement
{
	if not InCombat() EnhancementPrecombatShortCdActions()
	unless not InCombat() and EnhancementPrecombatShortCdPostConditions()
	{
		EnhancementDefaultShortCdActions()
	}
}

AddIcon checkbox=opt_shaman_enhancement_aoe help=shortcd specialization=enhancement
{
	if not InCombat() EnhancementPrecombatShortCdActions()
	unless not InCombat() and EnhancementPrecombatShortCdPostConditions()
	{
		EnhancementDefaultShortCdActions()
	}
}

AddIcon enemies=1 help=main specialization=enhancement
{
	if not InCombat() EnhancementPrecombatMainActions()
	unless not InCombat() and EnhancementPrecombatMainPostConditions()
	{
		EnhancementDefaultMainActions()
	}
}

AddIcon checkbox=opt_shaman_enhancement_aoe help=aoe specialization=enhancement
{
	if not InCombat() EnhancementPrecombatMainActions()
	unless not InCombat() and EnhancementPrecombatMainPostConditions()
	{
		EnhancementDefaultMainActions()
	}
}

AddIcon checkbox=!opt_shaman_enhancement_aoe enemies=1 help=cd specialization=enhancement
{
	if not InCombat() EnhancementPrecombatCdActions()
	unless not InCombat() and EnhancementPrecombatCdPostConditions()
	{
		EnhancementDefaultCdActions()
	}
}

AddIcon checkbox=opt_shaman_enhancement_aoe help=cd specialization=enhancement
{
	if not InCombat() EnhancementPrecombatCdActions()
	unless not InCombat() and EnhancementPrecombatCdPostConditions()
	{
		EnhancementDefaultCdActions()
	}
}

### Required symbols
# arcane_torrent_mana
# ascendance_melee
# ascendance_melee_buff
# ascendance_talent
# augmentation
# berserking
# blood_fury_apsp
# bloodlust
# boulderfist
# boulderfist_buff
# crash_lightning
# crashing_storm_talent
# doom_winds
# earthen_spike
# feral_spirit
# flametongue
# flametongue_buff
# frostbrand
# frostbrand_buff
# fury_of_air
# fury_of_air_debuff
# hailstorm_talent
# heroism
# hot_hand_buff
# lava_lash
# lightning_bolt
# lightning_shield
# overcharge_talent
# quaking_palm
# rockbiter
# stormstrike
# sundering
# war_stomp
# wind_shear
# windsong
# windstrike
]]
	OvaleScripts:RegisterScript("SHAMAN", "enhancement", name, desc, code, "script")
end
